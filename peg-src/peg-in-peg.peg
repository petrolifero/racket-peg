#lang peg

(require "s-exp.rkt");

_ < ([ \t\n] / '//' [^\n]*)*;
SLASH < '/' _;

name <-- [a-zA-Z_] [a-zA-Z0-9\-_.]* _;

rule <-- name ('<---' / '<--' / '<-' / '<') _ pattern ('->' _ s-exp _)? ';' _;
pattern <-- alternative (SLASH alternative)*;
alternative <-- expression+;
expression <-- (name ~':' _)? ([!&~] _)? primary (([*+?] / range) _)?;
range <-- '{' _ number _ ',' _ number _ '}';
number <-- [0-9]+;
primary <-- '(' _ pattern ')' _ / '.' _ / literal / charclass / name;

literal <-- ~['] (~[\\] ['\\] / !['\\] .)* ~['] _;

charclass <-- ~'[' '^'? (cc-range / cc-escape / cc-single)+ ~']' _;
cc-range <-- cc-char ~'-' cc-char;
cc-escape <-- ~[\\] .;
cc-single <-- cc-char;
cc-char <- !cc-escape-char . / 'n' / 't';
cc-escape-char <- '[' / ']' / '-' / '^' / '\\' / 'n' / 't';

peg <-- _ import* rule+;
import <-- s-exp _ ';' _;
